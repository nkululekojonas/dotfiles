#!/bin/bash

# install: symlink configuration dotfiles to config directory, check and install Homebrew
# Author: Nkululeko Jonas
# License: MIT
set -euo pipefail

# Define the source (dotfiles) and target directories
DOTFILES_DIR="${HOME}/dotfiles"
ZSHENV_DEST="${ZSHENV_DEST:-/etc/zshenv}"
CONFIG_DIR="${XDG_CONFIG_HOME:-${HOME}/.config}"

# List of files/directories to symlink
files=(
    "vim/vimrc"
    "ssh/config"
    "git/gitconfig"
    "git/gitignore"
    "tmux/tmux.conf"
    "zsh/.zprofile"
    "zsh/.zshenv"
    "zsh/.zshrc"
    "zsh/aliases.zsh" 
    "zsh/functions.zsh"
)

# Flags
DRY_RUN=false
SKIP_BREW=false
SKIP_SYMLINKS=false

# Log input
log() {
    echo -e "\e[32m[INFO]\e[0m $1"
}

# Log error
error() {
    echo -e "\e[31m[ERROR]\e[0m $1" >&2
}

# Function to print usage
usage() {
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "  --dry-run       Show actions without executing"
    echo "  --skip-brew     Skip Homebrew installation"
    echo "  --skip-symlinks Skip creating symlinks"
    echo "  -h, --help      Show this help message"
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --dry-run) DRY_RUN=true; shift;;
        --skip-symlinks) SKIP_SYMLINKS=true; shift;;
        --skip-brew) SKIP_BREW=true; shift;;
        -h|--help) usage; exit 0;;
        *) error "Invalid option: $1"; usage; exit 1;;
    esac
done

# Function to backup existing files that aren't symlinks
backup() {
    local file="$1"
    if [ -e "$file" ] && [ ! -L "$file" ]; then
        if [ "$DRY_RUN" = true ]; then
            log "[DRY RUN] Would backup: $file -> ${file}.bak"
        else
            mv "$file" "${file}.bak"
            log "Backed up: $file -> ${file}.bak"
        fi
    fi
}

# Function to create symlink
symlink() {
    local src="${DOTFILES_DIR}/$1"
    local dest="${CONFIG_DIR}/$1"
    local dest_dir

    # Override destination for specific files
    if [ "$1" = "zsh/.zshenv" ]; then
        dest="$ZSHENV_DEST"
    elif [ "$1" = "ssh/config" ]; then
        dest="$HOME/.ssh/config"
    fi
    dest_dir=$(dirname "$dest")

    if [ ! -e "$src" ]; then
        error "Source file $src does not exist."
        return 1
    fi

    if [ "$DRY_RUN" = true ]; then
        log "[DRY RUN] Would create symlink: $dest -> $src"
        return 0
    fi

    # Ensure directory exists
    mkdir -p "$dest_dir"
    backup "$dest"

    # Create the symlink; use sudo for /etc/zshenv if necessary
    if [ "$1" = "zsh/.zshenv" ] && [ ! -w "$dest_dir" ]; then
        log "Requesting sudo access to link .zshenv..."
        sudo ln -sf "$src" "$dest"
    else 
        ln -sf "$src" "$dest"
    fi

    log "Created symlink: $dest -> $src"
}

if [ ! -d "$DOTFILES_DIR" ]; then
    error "DOTFILES_DIR ($DOTFILES_DIR) does not exist."
    exit 1
fi

if [ "$SKIP_SYMLINKS" = false ]; then
    log "Creating symlinks from $DOTFILES_DIR to $CONFIG_DIR"
    for file in "${files[@]}"; do
        symlink "$file"
    done
    log "Symlink creation complete."
else
    log "Skipping symlink creation."
fi

if [ "$SKIP_BREW" = false ]; then
    if ! command -v brew &> /dev/null; then
        if [ "$DRY_RUN" = true ]; then
            log "[DRY RUN] Would install Homebrew."
        else
            log "Installing Homebrew"
            if ! /usr/bin/env bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; then
                error "Failed to install Homebrew"
                exit 1
            fi
            eval "$(brew shellenv)"
        fi
    else
        log "Homebrew is already installed."
    fi

    BREWFILE="${DOTFILES_DIR}/Brewfile"
    if [ -f "$BREWFILE" ]; then
        if [ "$DRY_RUN" = true ]; then
            log "[DRY RUN] Would run: brew bundle --file=$BREWFILE"
        else
            log "Installing Homebrew dependencies from Brewfile"
            if ! brew bundle --file="$BREWFILE"; then
                error "Failed to install Homebrew dependencies."
                exit 1
            fi
        fi
    else
        log "Warning: Brewfile not found at $BREWFILE. Skipping dependencies."
    fi
else
    log "Skipping Homebrew installation."
fi

log "Setup complete!"
exit
